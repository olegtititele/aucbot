using PostgreSQL;
using ConfigFile;
using Bot_Keyboards;

using Telegram.Bot;
using Telegram.Bot.Types.Enums;


namespace CommandsSpace
{
    public static class Commands
    {
        async public static void AdminCommnads(ITelegramBotClient botClient, string messageText, long chatId, int messageId)
        {
            if(messageText == "/help")
            {
                string commandsText = "";
                foreach(var command in Config.AdminCommnads)
                {
                    commandsText += $"\n\n<code>{command.Key}</code> - {command.Value}";
                }
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "<b>üöÄ –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º: </b>" + commandsText,
                    parseMode: ParseMode.Html
                );
            }
            else if(messageText!.Contains("/get_total_nft"))
            {
                try
                {
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"<b>–û–±—â–µ–µ –∫–æ–ª-–≤–æ NFT: </b><code>{UserDB.GetTotalNftNumber()}</code>",
                        parseMode: ParseMode.Html
                    );
                }
                catch(Exception)
                {
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                        parseMode: ParseMode.Html
                    );
                }
            }
            else if(messageText!.Contains("/updade_total_nft "))
            {
                try
                {
                    string newTotalNft = messageText.Split(" ")[1];
                    UserDB.UpdateTotalNftNumber(newTotalNft);
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"<b>–û–±—â–µ–µ –∫–æ–ª-–≤–æ NFT –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: </b><code>{newTotalNft}</code>",
                        parseMode: ParseMode.Html
                    );
                }
                catch(Exception)
                {
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                        parseMode: ParseMode.Html
                    );
                }
            }
            else if(messageText!.Contains("/add_to_total_nft "))
            {
                try
                {
                    string newTotalNft = messageText.Split(" ")[1];
                    UserDB.AddTotalNftNumber(newTotalNft);
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"<b>–û–±—â–µ–µ –∫–æ–ª-–≤–æ NFT –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: </b><code>{UserDB.GetTotalNftNumber()}</code>",
                        parseMode: ParseMode.Html
                    );
                }
                catch(Exception)
                {
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                        parseMode: ParseMode.Html
                    );
                }
            }
            else if(messageText!.Contains("/update_ton_wallet "))
            {
                try
                {
                    string newTONWallet = messageText.Split(" ")[1];
                    UserDB.UpdateTONWallet(newTONWallet);
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"<b>TON –∫–æ—à–µ–ª—ë–∫ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: </b><code>{UserDB.GetTONWallet()}</code>",
                        parseMode: ParseMode.Html
                    );
                }
                catch(Exception)
                {
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                        parseMode: ParseMode.Html
                    );
                }
            }
            else if(messageText!.Contains("/get_ton_wallet"))
            {
                try
                {
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"<b>TON –∫–æ—à–µ–ª—ë–∫: </b><code>{UserDB.GetTONWallet()}</code>",
                        parseMode: ParseMode.Html
                    );
                }
                catch(Exception)
                {
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                        parseMode: ParseMode.Html
                    );
                }
            }
            else if(messageText!.Contains("/add_new_nft "))
            {
                try
                {
                    string nftAddress = messageText.Split(" ")[1].Split("::")[0];
                    int firstBet = Int32.Parse(messageText.Split(" ")[1].Split("::")[1]);
                    int minStep = Int32.Parse(messageText.Split(" ")[1].Split("::")[2]);
                    int redemptionPrice = Int32.Parse(messageText.Split(" ")[1].Split("::")[3]);
                    DateTime validUntil = Convert.ToDateTime(messageText.Split(" ")[1].Split("::")[4]);
                    if(NewNftDB.AddNewNft(chatId, nftAddress, firstBet.ToString(), minStep.ToString(), redemptionPrice.ToString(), validUntil))
                    {
                        await botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: $"<b>NFT –¥–æ–±–∞–≤–ª–µ–Ω–∞</b>",
                            parseMode: ParseMode.Html
                        );
                    }
                    else
                    {
                        await botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: $"<b>–î–∞–Ω–Ω–∞—è NFT —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞.</b>",
                            parseMode: ParseMode.Html
                        );
                    }
                    
                }
                catch(Exception)
                {
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                        parseMode: ParseMode.Html
                    );
                }
            }
        }

        async public static void StartCommand(ITelegramBotClient botClient, string messageText, long chatId, int messageId, string username)
        {
            if(chatId.ToString()[0]=='-'){ return; }
            else if(UserDB.CheckUser(chatId))
            {
                if(UserDB.GetWallet(chatId)=="–ù–µ —É–∫–∞–∑–∞–Ω")
                {
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: Config.auctionRulesText,
                        parseMode: ParseMode.Html,
                        replyMarkup: Keyboards.knowledge
                    );
                }
                else
                {
                    UserDB.UpdateState(chatId, "MainMenu");
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"<b>üíé–ö–∞–Ω–∞–ª TON DOODLES PRESALE: @TonDoodlesNFT</b>",
                        parseMode: ParseMode.Html,
                        replyMarkup: Keyboards.MenuKb
                    );
//                     await botClient.SendTextMessageAsync(
//                         chatId: chatId,
//                         text: Config.startText,
//                         parseMode: ParseMode.Html,
//                         replyMarkup: Keyboards.MenuKb
//                     );
                }
                return;
            }
            else
            {
                try
                {
                    UserDB.CreateUser(chatId, username!);
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: Config.auctionRulesText,
                        parseMode: ParseMode.Html,
                        replyMarkup: Keyboards.knowledge
                    );

                }
                catch(Exception)
                {
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"<b>üíé –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å @username.</b>",
                        parseMode: ParseMode.Html
                    );
                }
                return;
            }
        }
    }
}
