using Telegram.Bot.Types.ReplyMarkups;
using PostgreSQL;
using ConfigFile;

using System.Globalization;

namespace Bot_Keyboards
{
    class Keyboards
    {
        public static InlineKeyboardMarkup knowledge = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚úÖ –û–∑–Ω–∞–∫–æ–º–ª–µ–Ω", callbackData: "knowledge"),
            },
        });


        public static InlineKeyboardMarkup ProfileNotVerifKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚úîÔ∏è –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", callbackData: "verification"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "–°–æ–∑–¥–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω", callbackData: "create_an_auction"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚Ü™Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å TON –∫–æ—à–µ–ª—ë–∫", callbackData: "change_toncoin_wallet"),
            },
        });

        public static InlineKeyboardMarkup ProfileVerifKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "–°–æ–∑–¥–∞—Ç—å –∞—É–∫—Ü–∏–æ–Ω", callbackData: "create_an_auction"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚Ü™Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å TON –∫–æ—à–µ–ª—ë–∫", callbackData: "change_toncoin_wallet"),
            },
        });

        public static InlineKeyboardMarkup InputBetKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚§µÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON:", callbackData: "---"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ—Ä–≥–∞–º", callbackData: "back_to_auction"),
            },
        });

        public static InlineKeyboardMarkup BackToAuction = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ—Ä–≥–∞–º", callbackData: "back_from_input_bet"),
            },
        });

        public static InlineKeyboardMarkup BackToProfile = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callbackData: "back_to_profile"),
            },
        });

        public static InlineKeyboardMarkup NftCollectionsKb()
        {
            var rows = new List<InlineKeyboardButton[]>();
            List<string> nftCollections = NewNftDB.GetAllCollections();
            
            foreach (string nftCollection in nftCollections)
            {
                int nftInCollectionCount = NewNftDB.NftInCollectionCount(nftCollection);
                if(nftInCollectionCount == 0)
                {
                    continue;
                }
                else
                {
                    rows.Add(
                        new[]
                        {
                            InlineKeyboardButton.WithCallbackData($"{CultureInfo.CurrentCulture.TextInfo.ToTitleCase(nftCollection.Replace("_"," "))} ({nftInCollectionCount})", $"{nftCollection}"),
                        }
                    );
                }
                
            }
            
            return rows.ToArray();
        }

        public static InlineKeyboardMarkup NftKb(int currentItemIndex, int lastItemIndex, string nftCollection, string validUntil)
        {
            

            int previousItemIndex;
            int nextItemIndex;
            if(currentItemIndex == 0)
            {
                previousItemIndex = lastItemIndex;
            }
            else
            {
                previousItemIndex = currentItemIndex;
            }

            if(currentItemIndex + 1 == lastItemIndex)
            {
                nextItemIndex = 1;
            }
            else
            {
                nextItemIndex = currentItemIndex + 2;
            }

            InlineKeyboardMarkup NftKb;

            if(NewNftDB.NftInCollectionCount(nftCollection) > 1)
            {
                NftKb = new(new []
                {
                    // new []
                    // {
                    //     InlineKeyboardButton.WithCallbackData(text: $"–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {startBet} TON", callbackData: "2"),
                    // },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: $"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤ ‚§µÔ∏è", callbackData: "---"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: $"{validUntil}", callbackData: "---"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "üõí –¢–æ—Ä–≥–æ–≤–∞—Ç—å", callbackData: "trade"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: $"{previousItemIndex} | {lastItemIndex}", callbackData: "previous"),
                        InlineKeyboardButton.WithCallbackData(text: "‚Ü©Ô∏è", callbackData: "back_to_collections"),
                        InlineKeyboardButton.WithCallbackData(text: $"{nextItemIndex} | {lastItemIndex}", callbackData: "next"),
                    },
                });
            }
            else
            {
                NftKb = new(new []
                {
                    // new []
                    // {
                    //     InlineKeyboardButton.WithCallbackData(text: $"–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {startBet} TON", callbackData: "2"),
                    // },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: $"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤ ‚§µÔ∏è", callbackData: "---"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: $"{validUntil}", callbackData: "---"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "üõí –¢–æ—Ä–≥–æ–≤–∞—Ç—å", callbackData: "trade"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callbackData: "back_to_collections"),
                    },
                });
            }
            
            return NftKb;
        }

        public static InlineKeyboardMarkup TradeKb(long chatId, string nftCollection, string nftName, string startBet, string lastBet, int redemptionPrice, int minStep)
        {

            InlineKeyboardMarkup TradeKb;

            if(NewNftDB.GetLastBetFromUser(nftCollection, nftName) == chatId)
            {
                TradeKb = new(new []
                {
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: $"–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {startBet} TON", callbackData: "2"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: $"üèÜ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ª–∏–¥–∏—Ä—É–µ—Ç: {lastBet} TON", callbackData: "2"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: $"–í—ã–∫—É–ø–∏—Ç—å NFT: {redemptionPrice} TON", callbackData: "redeem_nft"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: $"+{minStep} TON", callbackData: $"+{minStep}_TON"),
                        InlineKeyboardButton.WithCallbackData(text: $"+{minStep*2} TON", callbackData: $"+{minStep*2}_TON"),
                        InlineKeyboardButton.WithCallbackData(text: $"+{minStep*4} TON", callbackData: $"+{minStep*4}_TON"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–û–±–Ω–æ–≤–∏—Ç—å", callbackData: "update_rate"),
                        InlineKeyboardButton.WithCallbackData(text: "–ü–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞–≤–∫—É", callbackData: "make_a_bet"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ NFT", callbackData: "back_to_nft"),
                    },
                });
            }
            else
            {
                TradeKb = new(new []
                {
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: $"–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {startBet} TON", callbackData: "2"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: $"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {lastBet} TON", callbackData: "2"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: $"–í—ã–∫—É–ø–∏—Ç—å NFT: {redemptionPrice} TON", callbackData: "redeem_nft"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: $"+{minStep} TON", callbackData: $"+{minStep}_TON"),
                        InlineKeyboardButton.WithCallbackData(text: $"+{minStep*2} TON", callbackData: $"+{minStep*2}_TON"),
                        InlineKeyboardButton.WithCallbackData(text: $"+{minStep*4} TON", callbackData: $"+{minStep*4}_TON"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "–û–±–Ω–æ–≤–∏—Ç—å", callbackData: "update_rate"),
                        InlineKeyboardButton.WithCallbackData(text: "–ü–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞–≤–∫—É", callbackData: "make_a_bet"),
                    },
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData(text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ NFT", callbackData: "back_to_nft"),
                    },
                });
            }
            
            return TradeKb;
        }

        
        public static ReplyKeyboardMarkup MenuKb = new(new []
        {
            new KeyboardButton[] {"üíé –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"},
            new KeyboardButton[] {"üôä –ü—Ä–æ—Ñ–∏–ª—å", "‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"},
        })
        {
            ResizeKeyboard = true,
        };

        public static InlineKeyboardMarkup InfoKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithUrl(text: "üí≠ –ß–∞—Ç –ø—Ä–µ—Å–µ–π–ª–∞", url: "https://t.me/+zT2Fgh0M_hc4YmNk"),
            }
        });

        public static InlineKeyboardMarkup VerifacationKb()
        {
            string paymentLink = $"ton://transfer/{UserDB.GetTONWallet()}?amount=1000000000&text={Config.verifComment}";

            InlineKeyboardMarkup verifacationKb = new(new []
            {
                new[]
                {
                    InlineKeyboardButton.WithUrl(text: "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è", url: $"{paymentLink}"),
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData(text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", callbackData: "check_verification"),
                },
            });
            return verifacationKb;
        }

        public static InlineKeyboardMarkup PaymentKb(string payComment, int popupSum)
        {
            
            string paymentLink = $"ton://transfer/{UserDB.GetTONWallet()}?amount={popupSum}000000000&text={payComment}";

            InlineKeyboardMarkup paymentKb = new(new []
            {
                new[]
                {
                    InlineKeyboardButton.WithUrl(text: "–û–ø–ª–∞—Ç–∞", url: $"{paymentLink}"),
                },
                new[]
                {
                    InlineKeyboardButton.WithCallbackData(text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callbackData: "check_payment"),
                },
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ—Ä–≥–∞–º", callbackData: "back_from_input_bet"),
                },
            });
            return paymentKb;
        }

        public static InlineKeyboardMarkup NewAuctionKb = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å—Å NFT", callbackData: "specify_the_address_of_nft"),
            },
            // new []
            // {
            //     InlineKeyboardButton.WithCallbackData(text: "–¢–∏–ø —Ç–æ—Ä–≥–æ–≤ \"–ü—Ä–æ–¥–∞–∂–∞\"", callbackData: "---"),
            // },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É NFT", callbackData: "specify_the_start_price_of_nft"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –≤—ã–∫—É–ø–∞", callbackData: "specify_the_redemption_price"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "–ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥", callbackData: "specify_the_min_step"),
            },
            // new []
            // {
            //     InlineKeyboardButton.WithCallbackData(text: "–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞", callbackData: "specify_seller_comment"),
            // },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞", callbackData: "specify_valid_until"),
            },
            // new []
            // {
            //     InlineKeyboardButton.WithCallbackData(text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å NFT –Ω–∞ –∫–æ—à–µ–ª—ë–∫", callbackData: "send_nft"),
            // },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callbackData: "back_to_profile"),
                InlineKeyboardButton.WithCallbackData(text: "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Ü™Ô∏è", callbackData: "next_auction_step"),
                
            },
        });

        public static InlineKeyboardMarkup BackToNewAuctionInfo = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callbackData: "back_to_new_auction"),
            },
        });

        public static InlineKeyboardMarkup SentNftToHold = new(new []
        {
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callbackData: "check_if_nft_sent"),
            },
            new []
            {
                InlineKeyboardButton.WithCallbackData(text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callbackData: "back_to_new_auction"),
            },
        });
    }
}
